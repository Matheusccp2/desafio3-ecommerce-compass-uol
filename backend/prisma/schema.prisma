
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password      String
  address       String?
  phone_number  String?
  carts         Cart[]
  orders        Order[]
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

model Category {
  id                Int       @id @default(autoincrement())
  name              String
  description       String?
  parent_category_id Int?
  parent_category   Category? @relation("CategoryToCategory", fields: [parent_category_id], references: [id])
  sub_categories    Category[] @relation("CategoryToCategory")
  products          Product[]
  filters           Filter[]
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}

model Product {
  id              Int       @id @default(autoincrement())
  name            String
  description     String?
  price           Float
  discount        Float?
  category_id     Int
  category        Category  @relation(fields: [category_id], references: [id])
  stock_quantity  Int
  images          ProductImage[]
  cart_items      CartItem[]
  order_items     OrderItem[]
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
}

model ProductImage {
  id          Int       @id @default(autoincrement())
  product_id  Int
  product     Product   @relation(fields: [product_id], references: [id])
  image_url   String
  is_primary  Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model Cart {
  id          Int         @id @default(autoincrement())
  user_id     Int
  user        User        @relation(fields: [user_id], references: [id])
  cart_items  CartItem[]
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
}

model CartItem {
  id              Int       @id @default(autoincrement())
  cart_id         Int
  cart            Cart      @relation(fields: [cart_id], references: [id])
  product_id      Int
  product         Product   @relation(fields: [product_id], references: [id])
  quantity        Int
  selected_color  String?
  selected_size   String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
}

model Order {
  id            Int         @id @default(autoincrement())
  user_id       Int
  user          User        @relation(fields: [user_id], references: [id])
  total_amount  Float
  status        String
  order_items   OrderItem[]
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}

model OrderItem {
  id                        Int       @id @default(autoincrement())
  order_id                  Int
  order                     Order     @relation(fields: [order_id], references: [id])
  product_id                Int
  product                   Product   @relation(fields: [product_id], references: [id])
  quantity                  Int
  price_at_time_of_purchase Float
  selected_color            String?
  selected_size             String?
  created_at                DateTime  @default(now())
  updated_at                DateTime  @updatedAt
}

model Filter {
  id          Int       @id @default(autoincrement())
  name        String
  category_id Int
  category    Category  @relation(fields: [category_id], references: [id])
  options     FilterOption[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model FilterOption {
  id          Int       @id @default(autoincrement())
  filter_id   Int
  filter      Filter    @relation(fields: [filter_id], references: [id])
  value       String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}